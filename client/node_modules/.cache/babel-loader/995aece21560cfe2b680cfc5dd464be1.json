{"ast":null,"code":"import _defineProperty from \"/mnt/B48E87058E86BF7C/React/Ecommerce/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\"; //unique config key from firestore to connect with it\n\nvar config = {\n  apiKey: \"AIzaSyD5ll7OTXQAs-YARb7ZKjwn-P6O4mwOt2w\",\n  authDomain: \"crown-ecomerce.firebaseapp.com\",\n  databaseURL: \"https://crown-ecomerce.firebaseio.com\",\n  projectId: \"crown-ecomerce\",\n  storageBucket: \"\",\n  messagingSenderId: \"932871776509\",\n  appId: \"1:932871776509:web:dfe5df364f6577460d3694\",\n  measurementId: \"G-H8Y78KLL7M\"\n}; //converting userdata in the form firestore stores  to make sure no conflict arises\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = await firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const _ref = await userAuth,\n          displayName = _ref.displayName,\n          email = _ref.email;\n\n    const createdAt = await new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (err) {\n      console.log(\"Error in creating user\", err.message);\n    }\n  }\n\n  return userRef;\n}; // converting collections into the form firestore stores\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(document => {\n    const _document$data = document.data(),\n          title = _document$data.title,\n          items = _document$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: document.id,\n      title,\n      items\n    };\n    onUserAuthethication;\n  });\n  return transformedCollections.reduce((accumulator, collections) => {\n    accumulator[collections.title.toLowerCase()] = collections;\n    return accumulator;\n  }, {});\n}; // To maintain persistance in application, we'll get user\n\nexport const getCurrentUser = () => {\n  return new Promise((res, rej) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      res(userAuth);\n    }, rej);\n  });\n}; //initializing connection with firestore\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  \"prompt \": \"Select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/mnt/B48E87058E86BF7C/React/Ecommerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","document","data","title","items","routeName","encodeURI","toLowerCase","id","onUserAuthethication","reduce","accumulator","getCurrentUser","Promise","res","rej","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\n//unique config key from firestore to connect with it\r\nvar config = {\r\n  apiKey: \"AIzaSyD5ll7OTXQAs-YARb7ZKjwn-P6O4mwOt2w\",\r\n  authDomain: \"crown-ecomerce.firebaseapp.com\",\r\n  databaseURL: \"https://crown-ecomerce.firebaseio.com\",\r\n  projectId: \"crown-ecomerce\",\r\n  storageBucket: \"\",\r\n  messagingSenderId: \"932871776509\",\r\n  appId: \"1:932871776509:web:dfe5df364f6577460d3694\",\r\n  measurementId: \"G-H8Y78KLL7M\"\r\n};\r\n\r\n//converting userdata in the form firestore stores  to make sure no conflict arises\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n  const userRef = await firestore.doc(`users/${userAuth.uid}`);\r\n  const snapshot = await userRef.get();\r\n  if (!snapshot.exists) {\r\n    const { displayName, email } = await userAuth;\r\n    const createdAt = await new Date();\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      });\r\n    } catch (err) {\r\n      console.log(\"Error in creating user\", err.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\n// converting collections into the form firestore stores\r\nexport const convertCollectionsSnapshotToMap = collections => {\r\n  const transformedCollections = collections.docs.map(document => {\r\n    const { title, items } = document.data();\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: document.id,\r\n      title,\r\n      items\r\n    };\r\n    onUserAuthethication;\r\n  });\r\n  return transformedCollections.reduce((accumulator, collections) => {\r\n    accumulator[collections.title.toLowerCase()] = collections;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\n// To maintain persistance in application, we'll get user\r\nexport const getCurrentUser = () => {\r\n  return new Promise((res, rej) => {\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n      unsubscribe();\r\n      res(userAuth);\r\n    }, rej);\r\n  });\r\n};\r\n\r\n//initializing connection with firestore\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ \"prompt \": \"Select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}