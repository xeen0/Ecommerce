{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { ShopActionTypes } from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { collectionsFetchingSuccess, collectionsFecthingFailure } from './shop.actions';\nexport function* fetchCollectionAsync() {\n  try {\n    yield console.log('I am Fired');\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(collectionsFetchingSuccess(collectionsMap));\n  } catch (error) {\n    yield put(collectionsFecthingFailure(error.message));\n  } //    const collectionRef = firestore.collection(\"collections\");\n  //     dispatch(collectionsFecthingStart());\n  //     collectionRef\n  //       .get()\n  //       .then(async snapshot => {\n  //         const mapCollection = convertCollectionsSnapshotToMap(snapshot);\n  //         dispatch(collectionsFetchingSuccess(mapCollection));\n  //       })\n  //       .catch(error => dispatch(error.message));\n\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["D:\\React\\Ecommerce\\src\\redux\\shop\\shop.sagas.js"],"names":["takeEvery","call","put","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","collectionsFetchingSuccess","collectionsFecthingFailure","fetchCollectionAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,0BAAT,EAAqCC,0BAArC,QAAuE,gBAAvE;AACA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,MAAI;AACA,UAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACA,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACI,+BAAD,EAAkCQ,QAAlC,CAAjC;AACA,UAAMX,GAAG,CAACI,0BAA0B,CAACS,cAAD,CAA3B,CAAT;AACH,GAND,CAME,OAAOC,KAAP,EAAc;AAAE,UAAMd,GAAG,CAACK,0BAA0B,CAACS,KAAK,CAACC,OAAP,CAA3B,CAAT;AAAsD,GAPpC,CASpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AACD,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMlB,SAAS,CAACG,eAAe,CAACgB,sBAAjB,EAAyCX,oBAAzC,CAAf;AACH","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects'\r\nimport { ShopActionTypes } from './shop.types'\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'\r\nimport { collectionsFetchingSuccess, collectionsFecthingFailure } from './shop.actions';\r\nexport function* fetchCollectionAsync() {\r\n    try {\r\n        yield console.log('I am Fired')\r\n        const collectionRef = firestore.collection(\"collections\");\r\n        const snapshot = yield collectionRef.get()\r\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot)\r\n        yield put(collectionsFetchingSuccess(collectionsMap))\r\n    } catch (error) { yield put(collectionsFecthingFailure(error.message)) }\r\n\r\n    //    const collectionRef = firestore.collection(\"collections\");\r\n    //     dispatch(collectionsFecthingStart());\r\n    //     collectionRef\r\n    //       .get()\r\n    //       .then(async snapshot => {\r\n    //         const mapCollection = convertCollectionsSnapshotToMap(snapshot);\r\n    //         dispatch(collectionsFetchingSuccess(mapCollection));\r\n    //       })\r\n    //       .catch(error => dispatch(error.message));\r\n}\r\nexport function* fetchCollectionStart() {\r\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync)\r\n}"]},"metadata":{},"sourceType":"module"}